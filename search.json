[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About VCF",
    "section": "",
    "text": "YouTube\n  \n  \n    \n     Github\n  \n  \n    \n     Twitter\n  \n\n  \n  \n\n\nVCF is a blog and YouTube channel dedicated to coding in Python for empirical research in finance. My goal is to provide a platform for sharing knowledge and resources about coding in finance. The content is aimed at students, academics, and finance professionals who want to learn more about coding and empirical finance research.\nI use this platform to complement my teaching material and make it available to a wider audience. I also use it to share my experience with coding in finance and to document my journey as I learn new things."
  },
  {
    "objectID": "about.html#about-vincent-codes-finance",
    "href": "about.html#about-vincent-codes-finance",
    "title": "About VCF",
    "section": "",
    "text": "VCF is a blog and YouTube channel dedicated to coding in Python for empirical research in finance. My goal is to provide a platform for sharing knowledge and resources about coding in finance. The content is aimed at students, academics, and finance professionals who want to learn more about coding and empirical finance research.\nI use this platform to complement my teaching material and make it available to a wider audience. I also use it to share my experience with coding in finance and to document my journey as I learn new things."
  },
  {
    "objectID": "about.html#contact",
    "href": "about.html#contact",
    "title": "About VCF",
    "section": "Contact",
    "text": "Contact\nFor any comments and inquiries about this blog or the YouTube Channel, please contact me at:\nEMAIL: vincent@codes.finance"
  },
  {
    "objectID": "about.html#about-vincent",
    "href": "about.html#about-vincent",
    "title": "About VCF",
    "section": "About Vincent",
    "text": "About Vincent\n\n\nHello, my name is Vincent Gr√©goire. I‚Äôm an Associate Professor of Finance at HEC Montr√©al where I have been teaching Empirical Finance at the Master‚Äôs for a couple of years. My research interests include information economics, market microstructure, big data and machine learning applications in finance, fintech, and cybersecurity in finance. I‚Äôm also a Python enthusiast and curious about anything related to coding, data science, and machine learning.\n\n\n\n\n\n\n\n\nMy academic journey led me from undergraduate and master‚Äôs degrees in Computer Engineering to a Master‚Äôs in Financial Engineering at Universit√© Laval and a Ph.D.¬†in Finance from the University of British Columbia.\nSee my academic page for more details."
  },
  {
    "objectID": "about.html#license-and-reuse",
    "href": "about.html#license-and-reuse",
    "title": "About VCF",
    "section": "üîì License and reuse",
    "text": "üîì License and reuse\nAll content on this website is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. You are free to share and adapt the material for non-commercial purposes as long as you give appropriate credit and distribute your contributions under the same license.\nIf you want to reuse any of the content on this website for teaching purposes, please feel free to do so. I would appreciate it if you could include a link to this website in your course material and let me know by sending me an email at vincent@codes.finance. I will be happy to provide you with the source files for any of the content on this website upon request.\nIf for any reason you would like to reuse any of the content on this website for a purpose that is not covered by the above license, please contact me at vincent@codes.finance.\nThe code examples on this website are available on GitHub under the MIT License. You are free to use the code for any purpose, including commercial purposes, as long as you give appropriate credit and include a copy of the license in your distribution."
  },
  {
    "objectID": "about.html#how-is-this-blog-built",
    "href": "about.html#how-is-this-blog-built",
    "title": "About VCF",
    "section": "üõ†Ô∏è How is this blog built?",
    "text": "üõ†Ô∏è How is this blog built?\nThis website is blog using Quarto, an open-source document system that allows you to write content in Markdown or Jupyter Notebooks and publish it in a variety of formats, including static HTML files. Quarto is on my list of topics to cover in the future, so stay tuned for more content on that topic.\nThe blog is currently hosted using GitHub Pages."
  },
  {
    "objectID": "about.html#monetization",
    "href": "about.html#monetization",
    "title": "About VCF",
    "section": "ü§ë Monetization",
    "text": "ü§ë Monetization\nAs we move forward, I promise to maintain transparency, especially concerning any potential monetization avenues. At the moment, I do not monetize this website and the YouTube channel. That might change in the future, but I will always be transparent about it."
  },
  {
    "objectID": "about.html#use-of-ai",
    "href": "about.html#use-of-ai",
    "title": "About VCF",
    "section": "ü§ñ Use of AI",
    "text": "ü§ñ Use of AI\nWhile I make extensive use of AI-powered tools for editing and proofreading, I am committed to ensuring that all content is original and accurate. I will always cite my sources and give credit where credit is due."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "New Year, new blog",
    "section": "",
    "text": "Happy New Year and welcome to the first post of Vincent Codes Finance! As we step into a fresh year, I‚Äôm thrilled to launch this new blog and YouTube channel dedicated to Python and coding in empirical finance research. I‚Äôm excited to share my knowledge and experience with you."
  },
  {
    "objectID": "posts/welcome/index.html#about-me",
    "href": "posts/welcome/index.html#about-me",
    "title": "New Year, new blog",
    "section": "About me",
    "text": "About me\nI‚Äôm an Associate Professor of Finance at HEC Montr√©al where I have been teaching Empirical Finance at the Master‚Äôs level since 2020. My research interests include information economics, market microstructure, big data and machine learning applications in finance, fintech, and cybersecurity in finance. I‚Äôm also a Python enthusiast and curious about anything related to coding, data science, and machine learning. See my academic page for more details."
  },
  {
    "objectID": "posts/welcome/index.html#why-this-blog",
    "href": "posts/welcome/index.html#why-this-blog",
    "title": "New Year, new blog",
    "section": "Why this blog?",
    "text": "Why this blog?\nVincent Codes Finance is more than just a blog and YouTube channel; it‚Äôs my contribution to enhancing empirical finance research through proficient coding practices. Here, I‚Äôll share my insights, experiences, and love for Python, aiming to elevate the quality and efficiency of research. Whether you‚Äôre a student, a fellow researcher, or an enthusiast, there‚Äôs something here for you.\nMy motivation for creating Vincent Codes Finance is driven by a blend of professional ambition and personal passion:\n\nEnhancing Communication and Presentation Skills: This is one of my New Year‚Äôs resolutions. By regularly writing and producing content, I aim to refine my ability to present complex ideas clearly and engagingly.\nCreating a Valuable Resource: I‚Äôve witnessed firsthand the challenges students and co-authors face when dealing with empirical finance research, especially in coding and data analysis. Vincent Codes Finance is my channel to provide a structured, accessible resource to elevate the quality of their work and mine.\nSharing a Passion for Coding and Tools: Coding is not just about algorithms and syntax; it‚Äôs a way of thinking and problem-solving. I‚Äôm excited to share how powerful coding can be in the realm of finance research and to explore and introduce various computer tools that can transform our research methodologies.\nContributing to the Field: With years of experience under my belt, I believe I have unique insights and skills that can benefit others. By sharing my knowledge, I aim to contribute to the broader community of finance researchers and practitioners.\nPromoting High-Quality, Replicable Research: The landscape of empirical finance is rapidly changing with the increasing importance of data and computational tools. I am committed to promoting practices that ensure research is not only innovative but also replicable and robust, contributing to the credibility and reliability of financial research."
  },
  {
    "objectID": "posts/welcome/index.html#about-vcf",
    "href": "posts/welcome/index.html#about-vcf",
    "title": "New Year, new blog",
    "section": "About VCF",
    "text": "About VCF\nWe‚Äôll start with the basics, setting a strong foundation for everyone. The initial posts and videos will cover installing Python, setting up your development environment, understanding Python fundamentals, and introducing data analysis using pandas. These topics are essential for anyone who wants to get started with Python and coding in empirical finance research and will be released throughout January to align with my current teaching.\nCome February, we‚Äôll dive into more advanced topics such as handling dates and timestamp efficiently, diverse file formats for research data, using git and GitHub for collaboration, and techniques to speed up your computations.\nYour input is invaluable! I encourage you to send in your topic suggestions, questions, or any insights you might have. For all blog and channel-related inquiries, please reach out to me at vincent@codes.finance.\nFollow Along! Don‚Äôt miss out on any updates! Subscribe to the newsletter, the blog‚Äôs RSS feed, YouTube channel, and follow me on X. Let‚Äôs raise the bar for empirical finance research together.\nI look forward to sharing this journey with you and seeing where it takes us.\nCheers to a year of coding, discovery, and breakthroughs in empirical finance research!\n- Vincent"
  },
  {
    "objectID": "posts/install-python-312/index.html",
    "href": "posts/install-python-312/index.html",
    "title": "Installing Python 3.12",
    "section": "",
    "text": "In this short tutorial, I cover installing Python 3.12 and the related tools for a complete coding environment."
  },
  {
    "objectID": "posts/install-python-312/index.html#what-you-need-for-a-complete-python-environment",
    "href": "posts/install-python-312/index.html#what-you-need-for-a-complete-python-environment",
    "title": "Installing Python 3.12",
    "section": "What you need for a complete Python environment",
    "text": "What you need for a complete Python environment\nThe most common way to use Python is to install it locally on your computer. The instructions below will guide you through the process of installing the following tools:\n\nPython: The Python interpreter, which allows you to run Python code.\nPoetry: A package manager for Python. We use it to manage the external libraries used in projects. Poetry makes it easy to install and update libraries on a per-project basis, and to make sure all collaborators use the same library version.\nVisual Studio Code: Visual Studio Code is a free source code editor made by Microsoft. Features include support for debugging, syntax highlighting and intelligent code completion. Users can install extensions that add additional functionality.\n\nWe will also install the following tools that are not required to run Python code, but are useful when working on projects with code:\n\nGit and GitHub: We use Git to manage my code and GitHub to host my code online and collaborate with others. Git is a version control system that tracks code changes and keeps a full history of changes. GitHub is a website that hosts Git repositories and provides additional features for collaboration such as issue tracking and pull requests.\n\n\n\n\n\n\n\nPoetry vs Anaconda\n\n\n\n\n\nMost Python projects use external libraries. For example, we use the pandas library for data analysis. To manage these libraries, we need a package manager. I recommend using Poetry. Anaconda was my package manager of choice for many years and it remains very popular, but like many I recently switched to Poetry. Here is my view of the pros and cons of each:\n\nPoetry\n\nPros\n\nFlexibility with Python version It is very easy to specify which version of Python an environment should use and to change it later.\nDependency management Poetry makes it easy to install and update libraries on a per-project basis, and to make sure all collaborators use the same library version.\nPerformance Poetry is much faster than Anaconda.\nSimple to update Poetry is easy to update, and it is easy to update the libraries in a project.\n\n\n\nCons\n\nInitial setup The initial setup is a bit more complex than Anaconda, but if you follow the instructions below, it should be easy.\nLearning curve Poetry is a new tool, so there is a learning curve. However, it is not that difficult to learn.\nNot as widely used (newer) Poetry is a new tool, so it is not as widely used as Anaconda. However, it is gaining popularity very quickly.\n\n\n\n\nAnaconda\n\nPros\n\nEase of use Anaconda is very easy to install and use.\nWide adoption in science and data analysis Anaconda is very popular in the scientific community, so it is easy to find help online.\n\n\n\nCons\n\nBloat and performance Anaconda is very bloated and slow. It is much slower than Poetry.\nUpdates Updating Anaconda is a pain. It is also difficult to update the libraries in a project when a conflict arises.\nComplexity when there are issues Anaconda is a complex tool, so when there are issues, it can be difficult to troubleshoot.\n\nAnother important difference is that Anaconda is a complete environment. Anaconda comes with many libraries pre-installed, so you can start working on projects right away. This might seem like a good thing, but I find that it is better to start with a clean environment and install only the libraries you need for each project. This way, you know exactly which libraries are used in each project, which is part of the best practices for reproducible research."
  },
  {
    "objectID": "posts/install-python-312/index.html#video-tutorial",
    "href": "posts/install-python-312/index.html#video-tutorial",
    "title": "Installing Python 3.12",
    "section": "Video tutorial",
    "text": "Video tutorial\nThis video shows how to install Python and the related tools on macOS using Homebrew. A write-up of the instructions is available below, along with instructions for manual installation on macOS and other platforms."
  },
  {
    "objectID": "posts/install-python-312/index.html#installation",
    "href": "posts/install-python-312/index.html#installation",
    "title": "Installing Python 3.12",
    "section": "Installation",
    "text": "Installation\n\n macOS (preferred) macOS (manual) Linux Windows\n\n\nIf you are using macOS, I recommend using Homebrew to install Python and the other tools. Homebrew is a package manager for macOS that allows you to install and update software from the command line. It simplifies the installation process and makes it easy to keep your software up-to-date. If you prefer not to use Homebrew, you can install Python and the other tools manually using the official installers.\nFirst, you need to open the Terminal app. You can find it in the Applications/Utilities folder, or by using Spotlight (press ‚åò + Space and type Terminal).\n\nXcode command-line tools\nHomebrew requires the Xcode command-line tools from Apple. If so, you can install them from the terminal:\nxcode-select --install\n\n\nHomebrew\nTo install Homebrew (brew for short), run the following command in the Terminal app:\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nOnce brew is installed, look at the output of the previous command. It should tell you if you need to add Homebrew to your path. If so, copy the command it suggests and run it in the Terminal app.\n\n\nPython\nTo install Python with brew, run the following command in the Terminal app:\nbrew install python@3.12 python@3.11 python@3.10\nThis will install the latest version of Python (3.12), as well as the previous two versions. This is useful because some libraries are not compatible with the latest version of Python, so you might need to use an older version for some projects.\nTo make sure that the latest version of Python is used by default, run the following command in the Terminal app:\necho 'export PATH=\"$HOMEBREW_PREFIX/opt/python@3.12/libexec/bin:$PATH\"' &gt;&gt; ~/.zshrc\nYou should now have Python 3.12 installed. To check, run the following command in the Terminal app:\npython --version\n\n\n\n\n\n\nHomebrew and the base environment\n\n\n\n\n\nBy default, Homebrew will lock the base Python environment, which means that you cannot install additional libraries in the base environment. This means that you cannot easily install pandas or other libraries in the base environment.\nI consider this a good thing because it prevents you from accidentally breaking your Python installation and it forces you to use virtual environments, which is a good practice. However, if you want to change this behavior, there are a few workarounds.\nIsn‚Äôt it more convenient to have a base environment with all the libraries you need? Maybe, but eventually, it can lead to conflicts, difficult updates, and other annoying issues. My approach is to keep a sandbox environment with all the libraries I use regularly and to create a new environment for each project. This way, I can easily update the libraries in the sandbox environment, and I can delete the project environments when I am done with the project. This prevents accumulating virtual environments for discarded projects. If there is a conflict between two libraries in my sandbox environment, I can easily create a new one without reinstalling everything.\n\n\n\n\n\nPoetry\nTo install Poetry with brew, run the following command in the Terminal app:\nbrew install poetry\nBy default, Poetry installs Python for each project in the ~/Library/Caches/pypoetry/virtualenvs/ directory. I prefer to have it in the project directory. That way if, I delete the directory, then the environment is deleted as well, which prevents accumulating virtual environments for discarded projects. To enable this, run the following command:\npoetry config virtualenvs.in-project true\n\n\nVisual Studio Code\nTo install Visual Studio Code with brew, run the following command in the Terminal app:\nbrew install --cask visual-studio-code\n\n\n\n\n\n\n--cask option\n\n\n\nYou might have noticed that we used the --cask option to install Visual Studio Code.\nBrew offers two types of packages: formulae and casks. Formulae are used to install command-line tools, while casks are used to install graphical applications that go in the Applications folder.\nMost Mac applications can be installed using brew, just search for them on the homepage to find the name of the cask. For example, to install Google Chrome, you would run brew install --cask google-chrome.\n\n\n\n\nGit and GitHub\nGit is already installed on your Mac as a command-line tool because you have installed the Xcode tools. Still, I recommend installing the latest version using brew:\nbrew install git\nTo follow along with the upcoming tutorials, or to collaborate efficiently with others, you will also need to use GitHub. For this, you will want to use the GitHub CLI (gh for short) or the GitHub Desktop app. Both can be installed using brew:\nbrew install gh\nbrew install --cask github\n\n\n\n\n\n\n\n\n\nYou should consider Homebrew\n\n\n\nI know that using command-line instructions to install software can be intimidating at first, but it is not that difficult. In the long run, it is much easier to use Homebrew than to install everything manually. If you are not convinced, you can follow the manual installation instructions below, but I recommend that you come back later and try Homebrew.\n\n\n\nPython\nmacOS comes with Python pre-installed. However, it might not be the latest version of Python, so I recommend installing a fresh version from the official distribution at python.org.\nTo complete the installation, go to Applications/Python 3.12 and double-click Install Certificates.command.\nSee this thread on StackOverflow for more details.\n\n\nPoetry\nInstallation instructions can be found here.\nNote: If you get an SSH-related issue, go back up to the Python installation instruction and run Install Certificates.command.\nBy default, Poetry installs Python for each project in the ~/Library/Caches/pypoetry/virtualenvs/ directory. I prefer to have it in the project directory, that way if, I delete the directory, then the environment is deleted as well, which prevents accumulating virtual environments for discarded projects. To enable this, run the following command in the Terminal app. You can find it in the Applications/Utilities folder, or by using Spotlight (press ‚åò + Space and type Terminal).\npoetry config virtualenvs.in-project true\nIf you get an error message that poetry is not found, you need to add it to your path. To do so, open the Terminal app and run the following command:\nexport PATH=\"/Users/{user}/.local/bin:$PATH\"\nwhere {user} is your username. You can find it by running the following command in the Terminal app:\nwhoami\n\n\nVisual Studio Code\nDownload Visual Studio Code from code.visualstudio.com.\n\n\nGit and GitHub\nGit might already be installed on your Mac as a command-line tool if you have installed the Xcode tools. If not, you can get the official installer. You can also use Git directly in VS Code, or using a GUI client such as GitHub Desktop. I prefer to use the VS Code integration or the command-line tool, but many beginners prefer to use GitHub Desktop.\n\n\n\nTo be honest, if you‚Äôre using Linux, you probably already know how to install Python and other tools. The instructions below are for manual installation, but you probably want to use your distribution‚Äôs package manager instead.\n\nPython\nMost Linux distributions come with Python pre-installed. However, it might not be the latest version of Python, so I recommend installing a fresh version from the official distribution at python.org.\n\n\nPoetry\nInstallation instructions can be found here.\nBy default, Poetry installs Python for each project in the ~/.cache/pypoetry/virtualenvs/ directory. I prefer to have it in the project directory, that way if, I delete the directory, then the environment is deleted as well, which prevents accumulating virtual environments for discarded projects. To enable this, run the following command in the terminal:\npoetry config virtualenvs.in-project true\n\n\nVisual Studio Code\nDownload Visual Studio Code from code.visualstudio.com.\n\n\nGit and GitHub\nGit is probably already installed on Linux as a command-line tool. You can also use Git directly in VS Code, or using a GUI client such as GitHub Desktop. I prefer to use the VS Code integration or the command-line tool, but many beginners prefer to use GitHub Desktop.\n\n\n\n\nPython\nWindows does not have a built-in Python interpreter, so you will need to install it. I recommend installing a fresh version from the official distribution at python.org.\n\n\nPoetry\nInstallation instructions can be found here.\nNote: Unless you are using the Windows Subsystem for Linux (WSL), you should follow the instructions for Windows PowerShell.\nBy default, Poetry installs Python for each project in a global directory. I prefer to have it in the project directory, that way if, I delete the directory, then the environment is deleted as well, which prevents accumulating virtual environments for discarded projects. To enable this, run the following command in Powershell:\npoetry config virtualenvs.in-project true\n\n\nVisual Studio Code\nDownload Visual Studio Code from code.visualstudio.com.\n\n\nGit and GitHub\nTo use Git on Windows, you need to install the Git client, which is a command-line tool.\nYou can also use Git directly in VS Code, or using a GUI client such as GitHub Desktop, but you need to first install the Git client. I prefer to use the VS Code integration or the command-line tool, but many beginners prefer to use GitHub Desktop."
  },
  {
    "objectID": "posts/install-python-312/index.html#github.com-optional",
    "href": "posts/install-python-312/index.html#github.com-optional",
    "title": "Installing Python 3.12",
    "section": "GitHub.com (optional)",
    "text": "GitHub.com (optional)\nYou do not need a GitHub account to have a complete Python environment. However, I recommend creating one because it will be useful later when we start working on projects.\nTo follow the upcoming tutorials, you will need to create a GitHub account. You can create a free account at https://github.com/.\nGitHub offers many benefits to students and educators, including free access to GitHub Copilot and extra free hours for GitHub Codespaces. I highly recommend applying at GitHub Education if you are eligible."
  },
  {
    "objectID": "posts/install-python-312/index.html#creating-a-sandbox-environment",
    "href": "posts/install-python-312/index.html#creating-a-sandbox-environment",
    "title": "Installing Python 3.12",
    "section": "Creating a sandbox environment",
    "text": "Creating a sandbox environment\nI like to have a sandbox environment with all the libraries I use regularly that are not tied to a project. That way, if I want to try something quickly like reading a CSV file to look at it, I can do it without creating a new project. It is common to use the default (or base) environment for this, but I prefer to create a separate environment. This way, I can easily update the libraries in the sandbox environment. If there is a conflict between two libraries in my sandbox environment, I can easily create a new one without reinstalling everything.\nFor my sandbox environment, I will want at least the following libraries:\n\npandas: Data analysis library\nnumpy: Numerical computing library\nscipy: Scientific computing library\nmatplotlib: Plotting library\nseaborn: Plotting library\nstatsmodels: Statistical models\nscikit-learn: Machine learning library\nlinearmodels: Linear models for Python\npyarrow: Library for working with parquet files\njupyter: for Jupyter notebooks and the VS Code Python interactive window\npytest: Testing framework\n\nTo create this sandbox environment, I will use Poetry. First, I need to create a new directory for the environment. I will call it sandbox. Then, I need to create a new project in this directory:\nmkdir ~/Documents/sandbox\ncd ~/Documents/sandbox\npoetry init\nFollow the instructions to create the project. You can leave the default values for most questions, but do not add any dependencies (it‚Äôs simpler to add them after).\nThis creates a pyproject.toml file in the sandbox directory. This file contains the list of dependencies for the project (which will be empty for now).\nOnce the project is created, you can add the dependencies:\npoetry add pandas numpy scipy matplotlib seaborn statsmodels scikit-learn linearmodels pyarrow jupyter pytest\nThis step updates the pyproject.toml file and creates a poetry.lock file, which contains the exact version of each dependency. This file is used to make sure that all collaborators use the same version of each library. Note that because our dependencies are built on top of other libraries, Poetry will also install the dependencies of our dependencies.\nTo activate the environment in the terminal, run the following command:\npoetry shell"
  },
  {
    "objectID": "posts/install-python-312/index.html#configuring-visual-studio-code",
    "href": "posts/install-python-312/index.html#configuring-visual-studio-code",
    "title": "Installing Python 3.12",
    "section": "Configuring Visual Studio Code",
    "text": "Configuring Visual Studio Code\nVisual Studio Code is a free source code editor made by Microsoft. Features include support for debugging, syntax highlighting and intelligent code completion. While there are some built-in features for Python, most of the functionality comes from extensions. What I recommend is to use the profile feature of VS Code, which lets you define a set of extensions for each use case. For example, you can have a profile for Python development, another for R development, and another for LaTeX editing. This way, you can have a clean installation of VS Code and only install the extensions you need for each profile. Furthermore, each profile can have its specific settings and theming options.\nTo create a profile, click on the profile icon in the bottom left corner of the VS Code window. Then, under the Profiles section, click on Create Profile.\n\n\n\n\n\nGive the profile a name and select a distinctive icon. Make sure to copy from the Data Science template, which will install all the extensions you need for data analysis with Python.\n\n\n\n\n\nVS Code works best when you have a project (directory) open. To open a project, select Open Folder from the File menu and select the folder you want to open, for example, the sandbox folder we created earlier.\nTo open an interactive window, bring up the command palette by pressing ‚åò + Shift + P (or Ctrl + Shift + P on Windows and Linux) and type Python: Create Interactive Window.\nAt this point, VS Code should have detected the virtual environment created by Poetry and should have asked you if you want to use it. If not, you can select it manually by clicking on the Python version in the top right corner of the interactive window."
  },
  {
    "objectID": "posts/install-python-312/index.html#github-codespaces",
    "href": "posts/install-python-312/index.html#github-codespaces",
    "title": "Installing Python 3.12",
    "section": "Python in the cloud using Github Codespaces",
    "text": "Python in the cloud using Github Codespaces\nMany online platforms allow you to develop and run Python code without installing anything on your computer. If you want to use a cloud-based solution, I recommend using GitHub Codespaces.\nAll you need is a GitHub account. However, note that GitHub Codespaces is not free. At the time of this writing, you get 60 hours per month for free, or 90 hours if you signed up for the GitHub Student Developer Pack (this is for a 2-core machine, which is the smallest machine available). After that, you have to pay for it (the current rate is USD 0.18 per hour).\nMake sure to shut down your Codespace when you are not using it, otherwise you will run out of free hours very quickly.\n\nOther cloud alternatives\nThere are many other cloud-based alternatives. However, most are based on Jupyter notebooks, which can be interesting when you are learning Python, but are not ideal for robust, replicable research (watch out in the future for a video rant on why I don‚Äôt like Juptyer notebooks). Some of the most popular alternatives are:\n\nGoogle Colab\nCocalc\nWRDS Jupyter Hub (requires a WRDS subscription through your institution)"
  },
  {
    "objectID": "posts/install-python-312/index.html#whats-next",
    "href": "posts/install-python-312/index.html#whats-next",
    "title": "Installing Python 3.12",
    "section": "What‚Äôs next?",
    "text": "What‚Äôs next?\nNow that you have a complete Python environment, you can start learning Python. Watch out for my upcoming tutorials on Python for finance research in the coming days."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Vincent Codes Finance",
    "section": "",
    "text": "Installing Python 3.12\n\n\n\n\n\n\n\nPython\n\n\nTutorial\n\n\nBeginner\n\n\n\n\n\n\n\n\n\n\n\nJan 3, 2024\n\n\n\n\n\n\n  \n\n\n\n\nNew Year, new blog\n\n\n\n\n\n\n\nNews\n\n\n\n\n\n\n\n\n\n\n\nJan 1, 2024\n\n\n\n\n\n\nNo matching items\n\nReuseCC BY-NC-SA 4.0"
  }
]